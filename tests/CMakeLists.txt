add_definitions(-DCOMPILE_FOR_UNIT_TESTS)

macro(vc_add_test _name)
   set(_extra_flags)
   set(name ${_name})
   foreach(_arg ${ARGN})
      set(_extra_flags "${_extra_flags} -D${_arg}")
      set(name "${name}_${_arg}")
   endforeach()
   set(_target "${name}_scalar")
   add_executable(${_target} ${_name}.cpp)
   target_link_libraries(${_target} Vc)
   add_target_property(${_target} COMPILE_FLAGS "-DVC_IMPL=Scalar ${_extra_flags}")
   add_target_property(${_target} LABELS "Scalar")
   add_dependencies(Scalar ${_target})
   add_test(${_target} "${CMAKE_CURRENT_BINARY_DIR}/${_target}")
   set_property(TEST ${_target} PROPERTY LABELS "Scalar")

   if(USE_SSE2 AND NOT SSE_INTRINSICS_BROKEN)
      set(_target "${name}_sse")
      add_executable(${_target} ${_name}.cpp)
      target_link_libraries(${_target} Vc)
      add_target_property(${_target} COMPILE_FLAGS "-DVC_IMPL=SSE ${_extra_flags}")
      add_target_property(${_target} LABELS "SSE")
      add_dependencies(SSE ${_target})
      add_test(${_target} "${CMAKE_CURRENT_BINARY_DIR}/${_target}")
      set_property(TEST ${_target} PROPERTY LABELS "SSE")
   endif(USE_SSE2 AND NOT SSE_INTRINSICS_BROKEN)

   if(USE_AVX)
      set(_target "${name}_avx")
      add_executable(${_target} ${_name}.cpp)
      target_link_libraries(${_target} Vc)
      add_target_property(${_target} COMPILE_FLAGS "-DVC_IMPL=AVX ${_extra_flags}")
      add_target_property(${_target} LABELS "AVX")
      add_dependencies(AVX ${_target})
      add_test(${_target} "${CMAKE_CURRENT_BINARY_DIR}/${_target}")
      set_property(TEST ${_target} PROPERTY LABELS "AVX")
   endif(USE_AVX)

   if(LARRABEE_FOUND)
      set(_target "${name}_lrb")
      add_executable(${_target} ${_name}.cpp)
      target_link_libraries(${_target} Vc)
      add_target_property(${_target} COMPILE_FLAGS "-DVC_IMPL=LRBni ${_extra_flags}")
      add_target_property(${_target} LABELS "LRBni")
      add_dependencies(LRBni ${_target})
      add_test(${_target} "${CMAKE_CURRENT_BINARY_DIR}/${_target}")
      set_property(TEST ${_target} PROPERTY LABELS "LRBni")
   endif(LARRABEE_FOUND)
endmacro(vc_add_test)

vc_add_test(scalaraccess)
if(CMAKE_COMPILER_IS_GNUCXX AND _gcc_version STRGREATER "4.5.0" AND _gcc_version STRLESS "4.5.3" )
   message(STATUS "WARNING: GCC 4.5.[12] are known to generate an internal compiler error on the memory unit test. (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=46723) The test will therefore not be compiled and executed.")
else()
   vc_add_test(memory)
endif()
vc_add_test(arithmetics)
vc_add_test(expandandmerge)
vc_add_test(load)
vc_add_test(store)
vc_add_test(gather)
vc_add_test(gather VC_USE_BSF_GATHERS)
vc_add_test(gather VC_USE_POPCNT_BSF_GATHERS)
vc_add_test(gather VC_GATHER_SET)
vc_add_test(scatter)
vc_add_test(math)
vc_add_test(mask)
vc_add_test(utils)
vc_add_test(deinterleave)
vc_add_test(casts)

if(USE_SSE2 AND NOT SSE_INTRINSICS_BROKEN)
   add_executable(sse_blend sse_blend.cpp)
   add_target_property(sse_blend LABELS "SSE")
   add_dependencies(SSE sse_blend)
   add_test(sse_blend "${CMAKE_CURRENT_BINARY_DIR}/sse_blend")
   set_property(TEST sse_blend PROPERTY LABELS "SSE")
   target_link_libraries(sse_blend Vc)

   set(target "gather_sse_LOOP")
   add_executable(${target} gather.cpp)
   add_target_property(${target} COMPILE_FLAGS "-DVC_NO_GATHER_TRICKS -DVC_IMPL=SSE")
   add_target_property(${target} LABELS "SSE")
   add_dependencies(SSE ${target})
   target_link_libraries(${target} Vc)
   add_test(${target} "${CMAKE_CURRENT_BINARY_DIR}/${target}")
   set_property(TEST ${target} PROPERTY LABELS "SSE")
endif(USE_SSE2 AND NOT SSE_INTRINSICS_BROKEN)
